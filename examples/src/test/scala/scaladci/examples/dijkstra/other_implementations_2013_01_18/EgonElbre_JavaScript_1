
CalculateShortestPath = Context(@
function(initial, destination, graph) {
  Initial = initial;
  Graph = graph;
  Tentative = new ObjectMap();
  Unvisited = new ObjectMap();
  Path = new ObjectMap(); // best path (to --> from)
  Graph.nodes.map(function(node) {
    Unvisited.put(node);
    Tentative.put(node, Infinity);
  });
  Tentative.put(Initial, 0);

  Current = Initial;
  Current.markVisited();

  while(!Unvisited.isEmpty()) {
    Current.relaxDistances();
    Current.markVisited();

    if(!Unvisited.has(destination)) break;

    Current = Unvisited.findNearest();
    if(Current === undefined) break;
  }
  return Path.to(destination);
}, {
  Initial: {},
  Neighbor: {
    visited: function() {
      return !Unvisited.has(this);
    }
  },
  Current: {
    markVisited: function() {
      Unvisited.remove(this);
    },
    getNeighbors: function() {
      return Graph.neighbors(this);
    },
    relaxDistances: function() {
      Current.getNeighbors().map(function(node) {
        Neighbor = node;
        if(Neighbor.visited()) return;

        var alternate = Tentative.get(Current) + Current.distanceTo(Neighbor);
        if(alternate < Tentative.get(Neighbor)) {
          Tentative.put(Neighbor, alternate);
          Path.put(Neighbor, Current);
        }
      });
    },
    distanceTo: function(other) {
      return Graph.distance(this, other);
    }
  },
  Graph: {
    distance: function(from, to) {
      if(from === to) return 0;
      return this.nodes.get(from).get(to) || Infinity;
    },
    neighbors: function(node) {
      return this.nodes.get(node);
    }
  },
  Tentative: {},
  Unvisited: {
    findNearest: function() {
      var nearest = undefined,
        distance = Infinity;
      this.map(function(node) {
        var dist = Tentative.get(node);
        if(dist < distance) {
          nearest = node;
          distance = dist;
        }
      })
      return nearest;
    }
  },
  Path: {
    to: function(to) {
      var path = [to],
        cur = to;
      while(cur != Initial) {
        cur = this.get(cur);
        path.unshift(cur);
        if(cur === undefined) {
          return undefined;
        }
      }
      return path;
    }
  }
}@);

function mkGraph(edges) {
  var nodes = new ObjectMap();

  var forceMap = function(node) {
      var map = nodes.get(node);
      if(map === undefined) {
        map = new ObjectMap();
        nodes.put(node, map);
      }
      return map;
    };

  for(var i = 0; i < edges.length; i += 1) {
    var edge = edges[i],
      from = edge[0],
      to = edge[1],
      dist = edge[2];

    forceMap(to);
    var cur = forceMap(from);
    cur.put(to, dist);
  }
  return {
    nodes: nodes
  };
}

var a = {id:'a'},
  b = {id:'b'},
  c = {id:'c'},
  d = {id:'d'},
  e = {id:'e'},
  f = {id:'f'},
  g = {id:'g'},
  h = {id:'h'},
  i = {id:'i'};

var edges = [
  [a,b,2],
  [a,d,1],
  [b,c,3],
  [b,e,2],
  [c,f,1],
  [d,e,1],
  [d,g,2],
  [e,f,1],
  [f,i,4],
  [g,h,1],
  [h,i,2]];

var graph = mkGraph(edges);
var path = CalculateShortestPath(a, i, graph);

var proper = [];
for(var i = 0; i < path.length; i += 1)
proper.push(path[i].id);
log(proper.join(" -> "));
